/**
 * 1. Class Members
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 2. Fields
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 3. Constructors
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 4. Methods
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 5. Getters / Setters
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 6. Index Signatures
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 7. Class Heritage
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 8. implements Clauses
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 9. extends Clauses
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 10. Member Visibility
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 11. public
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 12. protected
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 13. private
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 14. Static Members
 */
class Class14_1 {
  static x = 'x'
  private static y = 'y'
  static #z = 'z'
  static print() {
    console.log(Class14_1.x, Class14_1.y, Class14_1.#z)
    return [Class14_1.x, Class14_1.y, Class14_1.#z]
  }
}
console.log(Class14_1.x) // => 0
// ❌ 属性“y”为私有属性，只能在类“Class14_1”中访问。
// console.log(Class14_1.y)
// ❌ 属性 "#z" 在类 "Class14_1" 外部不可访问，因为它具有专用标识符。ts(18013)
// console.log(Class14_1.#z)
Class14_1.print() // => 'x', 'y', 'z'
/**
 * @summary 静态成员可以继承
 */
class Class14_2 extends Class14_1 {
  class14_2_property = Class14_1.print()
}
console.log('class14_2_property: ', new Class14_2().class14_2_property) // => class14_2_property:  [ 'x', 'y', 'z']

/*------------------------------------------------------------------------------------------------*/

/**
 * 15. Special Static Names
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 16. Why No Static Classes
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 17. static Blocks in Classes
 * @summary 静态块允许编写具有自己作用域的语句序列，可以访问类的私有成员
 */
class Class17 {
  static #count = 0

  get count() {
    return Class17.#count
  }

  static {
    try {
      // ❌ error TS2304: Cannot find name 'loadLastInstances'.
      // const lastInstance = loadLastInstances()
      // Class17.#count += lastInstance.length
    } catch (err) {
      console.error('Class17: ', err)
    }
  }
}

/*------------------------------------------------------------------------------------------------*/

/**
 * 18. Generic Classes
 * @summary 泛型类有一定的类型推断能力
 */
class Class18<T> {
  contents: T
  constructor(value: T) {
    this.contents = value
  }
}
// 推断为 const class18: Class18<string>
const class18 = new Class18('Hello')

/*------------------------------------------------------------------------------------------------*/

/**
 * 19. Type Parameters in Static Memebers
 * @summary 泛型类的静态成员永远不能引用类的类型参数
 */
class Class19<T> {
  // ❌ 静态成员不能引用类类型参数。ts(2302)
  // static defaultValue: T
}

/*------------------------------------------------------------------------------------------------*/

/**
 * 20. this at Runtime in Classes
 */
class Class20 {
  name = 'Class20'
  getName() {
    return this.name
  }
}
const c20 = new Class20()
const obj20 = {
  name: 'obj20',
  getName: c20.getName
}
console.log('obj20.getName(): ', obj20.getName()) // => obj20.getName(): obj20

/*------------------------------------------------------------------------------------------------*/

/**
 * 21. Arrow Functions
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 22. this parameters
 * @summary this 参数将会在编译成 js 时擦除
 */
function fn22(this: any, x: number) {
  // 相当于会输出 global
  console.log('fn22 this: ', this)
}
fn22(123)
/*------------------------------------------------------------------------------------------------*/

/**
 * 23. this Types
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 24. this-based type guards
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 25. Parameter Properties
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 26. Class Expressions
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 27. abstract Classes and Memebers
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 28. Abstract Construct Signatures
 */

/*------------------------------------------------------------------------------------------------*/

/**
 * 29. Relationships Between Classes
 */
class Point29_1 {
  x = 0
  y = 0
}
class Point29_2 {
  x = 0
  y = 0
}
/**
 * @summary 成员相同则可以相互替换
 */
const p29_12: Point29_1 = new Point29_2()
class Point29_3 {
  name: string
  age: number
}
class Point29_4 {
  name: string
  age: number
  salary: number
}
/**
 * @summary 即使没有明确的继承，类之间也存在子类型关系
 */
const p29_34: Point29_3 = new Point29_4()
class Empty {}
function fn29(x: Empty) {
  // can't do anything with 'x', so I won't
}
/**
 * @summary 空类任何东西都可以替代
 */
// fn29(Window) // 仅限浏览器环境下
fn29({})
fn29(fn29)
